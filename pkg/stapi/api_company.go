/*
 * STAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package stapi

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type CompanyApiService service

/* 
CompanyApiService
Retrival of a single company
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uid Company unique ID
 * @param optional nil or *CompanyGetOpts - Optional Parameters:
     * @param "ApiKey" (optional.String) -  API key

@return CompanyFullResponse
*/

type CompanyGetOpts struct { 
	ApiKey optional.String
}

func (a *CompanyApiService) CompanyGet(ctx context.Context, uid string, localVarOptionals *CompanyGetOpts) (CompanyFullResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue CompanyFullResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/company"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	if localVarOptionals != nil && localVarOptionals.ApiKey.IsSet() {
		localVarQueryParams.Add("apiKey", parameterToString(localVarOptionals.ApiKey.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v CompanyFullResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
CompanyApiService
Pagination over companies
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *CompanySearchGetOpts - Optional Parameters:
     * @param "PageNumber" (optional.Int32) -  Zero-based page number
     * @param "PageSize" (optional.Int32) -  Page size
     * @param "ApiKey" (optional.String) -  API key

@return CompanyBaseResponse
*/

type CompanySearchGetOpts struct { 
	PageNumber optional.Int32
	PageSize optional.Int32
	ApiKey optional.String
}

func (a *CompanyApiService) CompanySearchGet(ctx context.Context, localVarOptionals *CompanySearchGetOpts) (CompanyBaseResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue CompanyBaseResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/company/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.PageNumber.IsSet() {
		localVarQueryParams.Add("pageNumber", parameterToString(localVarOptionals.PageNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiKey.IsSet() {
		localVarQueryParams.Add("apiKey", parameterToString(localVarOptionals.ApiKey.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v CompanyBaseResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
CompanyApiService
Searching companies
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *CompanySearchPostOpts - Optional Parameters:
     * @param "PageNumber" (optional.Int32) -  Zero-based page number
     * @param "PageSize" (optional.Int32) -  Page size
     * @param "Sort" (optional.String) -  Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param "ApiKey" (optional.String) -  API key
     * @param "Name" (optional.String) -  Company name
     * @param "Broadcaster" (optional.Bool) -  Whether it should be a broadcaster
     * @param "CollectibleCompany" (optional.Bool) -  Whether it should be a collectible company
     * @param "Conglomerate" (optional.Bool) -  Whether it should be a conglomerate
     * @param "DigitalVisualEffectsCompany" (optional.Bool) -  Whether it should be a digital visual effects company
     * @param "Distributor" (optional.Bool) -  Whether it should be a distributor
     * @param "GameCompany" (optional.Bool) -  Whether it should be a game company
     * @param "FilmEquipmentCompany" (optional.Bool) -  Whether it should be a film equipment company
     * @param "MakeUpEffectsStudio" (optional.Bool) -  Whether it should be a make-up effects studio
     * @param "MattePaintingCompany" (optional.Bool) -  Whether it should be a matte painting company
     * @param "ModelAndMiniatureEffectsCompany" (optional.Bool) -  Whether it should be a model and miniature effects company
     * @param "PostProductionCompany" (optional.Bool) -  Whether it should be a post-production company
     * @param "ProductionCompany" (optional.Bool) -  Whether it should be a production company
     * @param "PropCompany" (optional.Bool) -  Whether it should be a prop company
     * @param "RecordLabel" (optional.Bool) -  Whether it should be a record label
     * @param "SpecialEffectsCompany" (optional.Bool) -  Whether it should be a special effects company
     * @param "TvAndFilmProductionCompany" (optional.Bool) -  Whether it should be a TV and film production company
     * @param "VideoGameCompany" (optional.Bool) -  Whether it should be a video game company

@return CompanyBaseResponse
*/

type CompanySearchPostOpts struct { 
	PageNumber optional.Int32
	PageSize optional.Int32
	Sort optional.String
	ApiKey optional.String
	Name optional.String
	Broadcaster optional.Bool
	CollectibleCompany optional.Bool
	Conglomerate optional.Bool
	DigitalVisualEffectsCompany optional.Bool
	Distributor optional.Bool
	GameCompany optional.Bool
	FilmEquipmentCompany optional.Bool
	MakeUpEffectsStudio optional.Bool
	MattePaintingCompany optional.Bool
	ModelAndMiniatureEffectsCompany optional.Bool
	PostProductionCompany optional.Bool
	ProductionCompany optional.Bool
	PropCompany optional.Bool
	RecordLabel optional.Bool
	SpecialEffectsCompany optional.Bool
	TvAndFilmProductionCompany optional.Bool
	VideoGameCompany optional.Bool
}

func (a *CompanyApiService) CompanySearchPost(ctx context.Context, localVarOptionals *CompanySearchPostOpts) (CompanyBaseResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue CompanyBaseResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/company/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.PageNumber.IsSet() {
		localVarQueryParams.Add("pageNumber", parameterToString(localVarOptionals.PageNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiKey.IsSet() {
		localVarQueryParams.Add("apiKey", parameterToString(localVarOptionals.ApiKey.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarFormParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Broadcaster.IsSet() {
		localVarFormParams.Add("broadcaster", parameterToString(localVarOptionals.Broadcaster.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CollectibleCompany.IsSet() {
		localVarFormParams.Add("collectibleCompany", parameterToString(localVarOptionals.CollectibleCompany.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Conglomerate.IsSet() {
		localVarFormParams.Add("conglomerate", parameterToString(localVarOptionals.Conglomerate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DigitalVisualEffectsCompany.IsSet() {
		localVarFormParams.Add("digitalVisualEffectsCompany", parameterToString(localVarOptionals.DigitalVisualEffectsCompany.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Distributor.IsSet() {
		localVarFormParams.Add("distributor", parameterToString(localVarOptionals.Distributor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GameCompany.IsSet() {
		localVarFormParams.Add("gameCompany", parameterToString(localVarOptionals.GameCompany.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilmEquipmentCompany.IsSet() {
		localVarFormParams.Add("filmEquipmentCompany", parameterToString(localVarOptionals.FilmEquipmentCompany.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MakeUpEffectsStudio.IsSet() {
		localVarFormParams.Add("makeUpEffectsStudio", parameterToString(localVarOptionals.MakeUpEffectsStudio.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MattePaintingCompany.IsSet() {
		localVarFormParams.Add("mattePaintingCompany", parameterToString(localVarOptionals.MattePaintingCompany.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModelAndMiniatureEffectsCompany.IsSet() {
		localVarFormParams.Add("modelAndMiniatureEffectsCompany", parameterToString(localVarOptionals.ModelAndMiniatureEffectsCompany.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PostProductionCompany.IsSet() {
		localVarFormParams.Add("postProductionCompany", parameterToString(localVarOptionals.PostProductionCompany.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProductionCompany.IsSet() {
		localVarFormParams.Add("productionCompany", parameterToString(localVarOptionals.ProductionCompany.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PropCompany.IsSet() {
		localVarFormParams.Add("propCompany", parameterToString(localVarOptionals.PropCompany.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RecordLabel.IsSet() {
		localVarFormParams.Add("recordLabel", parameterToString(localVarOptionals.RecordLabel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SpecialEffectsCompany.IsSet() {
		localVarFormParams.Add("specialEffectsCompany", parameterToString(localVarOptionals.SpecialEffectsCompany.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TvAndFilmProductionCompany.IsSet() {
		localVarFormParams.Add("tvAndFilmProductionCompany", parameterToString(localVarOptionals.TvAndFilmProductionCompany.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VideoGameCompany.IsSet() {
		localVarFormParams.Add("videoGameCompany", parameterToString(localVarOptionals.VideoGameCompany.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v CompanyBaseResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
