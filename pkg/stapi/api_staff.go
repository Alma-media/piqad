/*
 * STAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package stapi

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type StaffApiService service

/* 
StaffApiService
Retrival of a single staff
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uid Staff unique ID
 * @param optional nil or *StaffGetOpts - Optional Parameters:
     * @param "ApiKey" (optional.String) -  API key

@return StaffFullResponse
*/

type StaffGetOpts struct { 
	ApiKey optional.String
}

func (a *StaffApiService) StaffGet(ctx context.Context, uid string, localVarOptionals *StaffGetOpts) (StaffFullResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue StaffFullResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/staff"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	if localVarOptionals != nil && localVarOptionals.ApiKey.IsSet() {
		localVarQueryParams.Add("apiKey", parameterToString(localVarOptionals.ApiKey.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v StaffFullResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
StaffApiService
Pagination over staff
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *StaffSearchGetOpts - Optional Parameters:
     * @param "PageNumber" (optional.Int32) -  Zero-based page number
     * @param "PageSize" (optional.Int32) -  Page size
     * @param "ApiKey" (optional.String) -  API key

@return StaffBaseResponse
*/

type StaffSearchGetOpts struct { 
	PageNumber optional.Int32
	PageSize optional.Int32
	ApiKey optional.String
}

func (a *StaffApiService) StaffSearchGet(ctx context.Context, localVarOptionals *StaffSearchGetOpts) (StaffBaseResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue StaffBaseResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/staff/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.PageNumber.IsSet() {
		localVarQueryParams.Add("pageNumber", parameterToString(localVarOptionals.PageNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiKey.IsSet() {
		localVarQueryParams.Add("apiKey", parameterToString(localVarOptionals.ApiKey.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v StaffBaseResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
StaffApiService
Searching staff
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *StaffSearchPostOpts - Optional Parameters:
     * @param "PageNumber" (optional.Int32) -  Zero-based page number
     * @param "PageSize" (optional.Int32) -  Page size
     * @param "Sort" (optional.String) -  Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC
     * @param "ApiKey" (optional.String) -  API key
     * @param "Name" (optional.String) -  Staff name
     * @param "BirthName" (optional.String) -  Staff birth name
     * @param "Gender" (optional.String) -  Staff gender
     * @param "DateOfBirthFrom" (optional.String) -  Minimal date the staff was born
     * @param "DateOfBirthTo" (optional.String) -  Maximal date the staff was born
     * @param "PlaceOfBirth" (optional.String) -  Place the staff was born
     * @param "DateOfDeathFrom" (optional.String) -  Minimal date the staff died
     * @param "DateOfDeathTo" (optional.String) -  Maximal date the staff died
     * @param "PlaceOfDeath" (optional.String) -  Place the staff died
     * @param "ArtDepartment" (optional.Bool) -  Whether this person should be from art department
     * @param "ArtDirector" (optional.Bool) -  Whether this person should be an art director
     * @param "ProductionDesigner" (optional.Bool) -  Whether this person should be a production designer
     * @param "CameraAndElectricalDepartment" (optional.Bool) -  Whether this person should be from camera and electrical department
     * @param "Cinematographer" (optional.Bool) -  Whether this person should be a cinematographer
     * @param "CastingDepartment" (optional.Bool) -  Whether this person should be from casting department
     * @param "CostumeDepartment" (optional.Bool) -  Whether this person should be from costume department
     * @param "CostumeDesigner" (optional.Bool) -  Whether this person should be a custume designer
     * @param "Director" (optional.Bool) -  Whether this person should be a director
     * @param "AssistantOrSecondUnitDirector" (optional.Bool) -  Whether this person should be an assistant or secound unit director director
     * @param "ExhibitAndAttractionStaff" (optional.Bool) -  Whether this person should be an exhibit and attraction staff
     * @param "FilmEditor" (optional.Bool) -  Whether this person should be a film editor
     * @param "Linguist" (optional.Bool) -  Whether this person should be a linguist
     * @param "LocationStaff" (optional.Bool) -  Whether this person should be a location staff
     * @param "MakeupStaff" (optional.Bool) -  Whether this person should be a make-up staff
     * @param "MusicDepartment" (optional.Bool) -  Whether this person should be from music department
     * @param "Composer" (optional.Bool) -  Whether this person should be a composer
     * @param "PersonalAssistant" (optional.Bool) -  Whether this person should be a personal assistant
     * @param "Producer" (optional.Bool) -  Whether this person should be a producer
     * @param "ProductionAssociate" (optional.Bool) -  Whether this person should be a production associate
     * @param "ProductionStaff" (optional.Bool) -  Whether this person should be a production staff
     * @param "PublicationStaff" (optional.Bool) -  Whether this person should be a publication staff
     * @param "ScienceConsultant" (optional.Bool) -  Whether this person should be a science consultant
     * @param "SoundDepartment" (optional.Bool) -  Whether this person should be from sound department
     * @param "SpecialAndVisualEffectsStaff" (optional.Bool) -  Whether this person should be a special and visual effects staff
     * @param "Author" (optional.Bool) -  Whether this person should be an author
     * @param "AudioAuthor" (optional.Bool) -  Whether this person should be an audio author
     * @param "CalendarArtist" (optional.Bool) -  Whether this person should be a calendar artist
     * @param "ComicArtist" (optional.Bool) -  Whether this person should be a comic artist
     * @param "ComicAuthor" (optional.Bool) -  Whether this person should be a comic author
     * @param "ComicColorArtist" (optional.Bool) -  Whether this person should be a comic color artist
     * @param "ComicInteriorArtist" (optional.Bool) -  Whether this person should be a comic interior artist
     * @param "ComicInkArtist" (optional.Bool) -  Whether this person should be a comic ink artist
     * @param "ComicPencilArtist" (optional.Bool) -  Whether this person should be a comic pencil artist
     * @param "ComicLetterArtist" (optional.Bool) -  Whether this person should be a comic letter artist
     * @param "ComicStripArtist" (optional.Bool) -  Whether this person should be a comic strip artist
     * @param "GameArtist" (optional.Bool) -  Whether this person should be a game artist
     * @param "GameAuthor" (optional.Bool) -  Whether this person should be a game author
     * @param "NovelArtist" (optional.Bool) -  Whether this person should be a novel artist
     * @param "NovelAuthor" (optional.Bool) -  Whether this person should be a novel author
     * @param "ReferenceArtist" (optional.Bool) -  Whether this person should be a reference artist
     * @param "ReferenceAuthor" (optional.Bool) -  Whether this person should be a reference author
     * @param "PublicationArtist" (optional.Bool) -  Whether this person should be a publication artist
     * @param "PublicationDesigner" (optional.Bool) -  Whether this person should be a publication designer
     * @param "PublicationEditor" (optional.Bool) -  Whether this person should be a publication editor
     * @param "PublicityArtist" (optional.Bool) -  Whether this person should be a publicity artist
     * @param "CbsDigitalStaff" (optional.Bool) -  Whether this person should be a part of CBS digital staff
     * @param "IlmProductionStaff" (optional.Bool) -  Whether this person should be a part of ILM production staff
     * @param "SpecialFeaturesStaff" (optional.Bool) -  Whether this person should be a special features artist
     * @param "StoryEditor" (optional.Bool) -  Whether this person should be a story editor
     * @param "StudioExecutive" (optional.Bool) -  Whether this person should be a studio executive
     * @param "StuntDepartment" (optional.Bool) -  Whether this person should be from stunt department
     * @param "TransportationDepartment" (optional.Bool) -  Whether this person should be from transportation department
     * @param "VideoGameProductionStaff" (optional.Bool) -  Whether this person is video game production staff
     * @param "Writer" (optional.Bool) -  Whether this person should be a writer

@return StaffBaseResponse
*/

type StaffSearchPostOpts struct { 
	PageNumber optional.Int32
	PageSize optional.Int32
	Sort optional.String
	ApiKey optional.String
	Name optional.String
	BirthName optional.String
	Gender optional.String
	DateOfBirthFrom optional.String
	DateOfBirthTo optional.String
	PlaceOfBirth optional.String
	DateOfDeathFrom optional.String
	DateOfDeathTo optional.String
	PlaceOfDeath optional.String
	ArtDepartment optional.Bool
	ArtDirector optional.Bool
	ProductionDesigner optional.Bool
	CameraAndElectricalDepartment optional.Bool
	Cinematographer optional.Bool
	CastingDepartment optional.Bool
	CostumeDepartment optional.Bool
	CostumeDesigner optional.Bool
	Director optional.Bool
	AssistantOrSecondUnitDirector optional.Bool
	ExhibitAndAttractionStaff optional.Bool
	FilmEditor optional.Bool
	Linguist optional.Bool
	LocationStaff optional.Bool
	MakeupStaff optional.Bool
	MusicDepartment optional.Bool
	Composer optional.Bool
	PersonalAssistant optional.Bool
	Producer optional.Bool
	ProductionAssociate optional.Bool
	ProductionStaff optional.Bool
	PublicationStaff optional.Bool
	ScienceConsultant optional.Bool
	SoundDepartment optional.Bool
	SpecialAndVisualEffectsStaff optional.Bool
	Author optional.Bool
	AudioAuthor optional.Bool
	CalendarArtist optional.Bool
	ComicArtist optional.Bool
	ComicAuthor optional.Bool
	ComicColorArtist optional.Bool
	ComicInteriorArtist optional.Bool
	ComicInkArtist optional.Bool
	ComicPencilArtist optional.Bool
	ComicLetterArtist optional.Bool
	ComicStripArtist optional.Bool
	GameArtist optional.Bool
	GameAuthor optional.Bool
	NovelArtist optional.Bool
	NovelAuthor optional.Bool
	ReferenceArtist optional.Bool
	ReferenceAuthor optional.Bool
	PublicationArtist optional.Bool
	PublicationDesigner optional.Bool
	PublicationEditor optional.Bool
	PublicityArtist optional.Bool
	CbsDigitalStaff optional.Bool
	IlmProductionStaff optional.Bool
	SpecialFeaturesStaff optional.Bool
	StoryEditor optional.Bool
	StudioExecutive optional.Bool
	StuntDepartment optional.Bool
	TransportationDepartment optional.Bool
	VideoGameProductionStaff optional.Bool
	Writer optional.Bool
}

func (a *StaffApiService) StaffSearchPost(ctx context.Context, localVarOptionals *StaffSearchPostOpts) (StaffBaseResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue StaffBaseResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/staff/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.PageNumber.IsSet() {
		localVarQueryParams.Add("pageNumber", parameterToString(localVarOptionals.PageNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiKey.IsSet() {
		localVarQueryParams.Add("apiKey", parameterToString(localVarOptionals.ApiKey.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarFormParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BirthName.IsSet() {
		localVarFormParams.Add("birthName", parameterToString(localVarOptionals.BirthName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gender.IsSet() {
		localVarFormParams.Add("gender", parameterToString(localVarOptionals.Gender.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateOfBirthFrom.IsSet() {
		localVarFormParams.Add("dateOfBirthFrom", parameterToString(localVarOptionals.DateOfBirthFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateOfBirthTo.IsSet() {
		localVarFormParams.Add("dateOfBirthTo", parameterToString(localVarOptionals.DateOfBirthTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceOfBirth.IsSet() {
		localVarFormParams.Add("placeOfBirth", parameterToString(localVarOptionals.PlaceOfBirth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateOfDeathFrom.IsSet() {
		localVarFormParams.Add("dateOfDeathFrom", parameterToString(localVarOptionals.DateOfDeathFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateOfDeathTo.IsSet() {
		localVarFormParams.Add("dateOfDeathTo", parameterToString(localVarOptionals.DateOfDeathTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceOfDeath.IsSet() {
		localVarFormParams.Add("placeOfDeath", parameterToString(localVarOptionals.PlaceOfDeath.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ArtDepartment.IsSet() {
		localVarFormParams.Add("artDepartment", parameterToString(localVarOptionals.ArtDepartment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ArtDirector.IsSet() {
		localVarFormParams.Add("artDirector", parameterToString(localVarOptionals.ArtDirector.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProductionDesigner.IsSet() {
		localVarFormParams.Add("productionDesigner", parameterToString(localVarOptionals.ProductionDesigner.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CameraAndElectricalDepartment.IsSet() {
		localVarFormParams.Add("cameraAndElectricalDepartment", parameterToString(localVarOptionals.CameraAndElectricalDepartment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cinematographer.IsSet() {
		localVarFormParams.Add("cinematographer", parameterToString(localVarOptionals.Cinematographer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CastingDepartment.IsSet() {
		localVarFormParams.Add("castingDepartment", parameterToString(localVarOptionals.CastingDepartment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CostumeDepartment.IsSet() {
		localVarFormParams.Add("costumeDepartment", parameterToString(localVarOptionals.CostumeDepartment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CostumeDesigner.IsSet() {
		localVarFormParams.Add("costumeDesigner", parameterToString(localVarOptionals.CostumeDesigner.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Director.IsSet() {
		localVarFormParams.Add("director", parameterToString(localVarOptionals.Director.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AssistantOrSecondUnitDirector.IsSet() {
		localVarFormParams.Add("assistantOrSecondUnitDirector", parameterToString(localVarOptionals.AssistantOrSecondUnitDirector.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExhibitAndAttractionStaff.IsSet() {
		localVarFormParams.Add("exhibitAndAttractionStaff", parameterToString(localVarOptionals.ExhibitAndAttractionStaff.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilmEditor.IsSet() {
		localVarFormParams.Add("filmEditor", parameterToString(localVarOptionals.FilmEditor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Linguist.IsSet() {
		localVarFormParams.Add("linguist", parameterToString(localVarOptionals.Linguist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LocationStaff.IsSet() {
		localVarFormParams.Add("locationStaff", parameterToString(localVarOptionals.LocationStaff.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MakeupStaff.IsSet() {
		localVarFormParams.Add("makeupStaff", parameterToString(localVarOptionals.MakeupStaff.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MusicDepartment.IsSet() {
		localVarFormParams.Add("musicDepartment", parameterToString(localVarOptionals.MusicDepartment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Composer.IsSet() {
		localVarFormParams.Add("composer", parameterToString(localVarOptionals.Composer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PersonalAssistant.IsSet() {
		localVarFormParams.Add("personalAssistant", parameterToString(localVarOptionals.PersonalAssistant.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Producer.IsSet() {
		localVarFormParams.Add("producer", parameterToString(localVarOptionals.Producer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProductionAssociate.IsSet() {
		localVarFormParams.Add("productionAssociate", parameterToString(localVarOptionals.ProductionAssociate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProductionStaff.IsSet() {
		localVarFormParams.Add("productionStaff", parameterToString(localVarOptionals.ProductionStaff.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublicationStaff.IsSet() {
		localVarFormParams.Add("publicationStaff", parameterToString(localVarOptionals.PublicationStaff.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ScienceConsultant.IsSet() {
		localVarFormParams.Add("scienceConsultant", parameterToString(localVarOptionals.ScienceConsultant.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SoundDepartment.IsSet() {
		localVarFormParams.Add("soundDepartment", parameterToString(localVarOptionals.SoundDepartment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SpecialAndVisualEffectsStaff.IsSet() {
		localVarFormParams.Add("specialAndVisualEffectsStaff", parameterToString(localVarOptionals.SpecialAndVisualEffectsStaff.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Author.IsSet() {
		localVarFormParams.Add("author", parameterToString(localVarOptionals.Author.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AudioAuthor.IsSet() {
		localVarFormParams.Add("audioAuthor", parameterToString(localVarOptionals.AudioAuthor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CalendarArtist.IsSet() {
		localVarFormParams.Add("calendarArtist", parameterToString(localVarOptionals.CalendarArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ComicArtist.IsSet() {
		localVarFormParams.Add("comicArtist", parameterToString(localVarOptionals.ComicArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ComicAuthor.IsSet() {
		localVarFormParams.Add("comicAuthor", parameterToString(localVarOptionals.ComicAuthor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ComicColorArtist.IsSet() {
		localVarFormParams.Add("comicColorArtist", parameterToString(localVarOptionals.ComicColorArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ComicInteriorArtist.IsSet() {
		localVarFormParams.Add("comicInteriorArtist", parameterToString(localVarOptionals.ComicInteriorArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ComicInkArtist.IsSet() {
		localVarFormParams.Add("comicInkArtist", parameterToString(localVarOptionals.ComicInkArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ComicPencilArtist.IsSet() {
		localVarFormParams.Add("comicPencilArtist", parameterToString(localVarOptionals.ComicPencilArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ComicLetterArtist.IsSet() {
		localVarFormParams.Add("comicLetterArtist", parameterToString(localVarOptionals.ComicLetterArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ComicStripArtist.IsSet() {
		localVarFormParams.Add("comicStripArtist", parameterToString(localVarOptionals.ComicStripArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GameArtist.IsSet() {
		localVarFormParams.Add("gameArtist", parameterToString(localVarOptionals.GameArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GameAuthor.IsSet() {
		localVarFormParams.Add("gameAuthor", parameterToString(localVarOptionals.GameAuthor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NovelArtist.IsSet() {
		localVarFormParams.Add("novelArtist", parameterToString(localVarOptionals.NovelArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NovelAuthor.IsSet() {
		localVarFormParams.Add("novelAuthor", parameterToString(localVarOptionals.NovelAuthor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReferenceArtist.IsSet() {
		localVarFormParams.Add("referenceArtist", parameterToString(localVarOptionals.ReferenceArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReferenceAuthor.IsSet() {
		localVarFormParams.Add("referenceAuthor", parameterToString(localVarOptionals.ReferenceAuthor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublicationArtist.IsSet() {
		localVarFormParams.Add("publicationArtist", parameterToString(localVarOptionals.PublicationArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublicationDesigner.IsSet() {
		localVarFormParams.Add("publicationDesigner", parameterToString(localVarOptionals.PublicationDesigner.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublicationEditor.IsSet() {
		localVarFormParams.Add("publicationEditor", parameterToString(localVarOptionals.PublicationEditor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublicityArtist.IsSet() {
		localVarFormParams.Add("publicityArtist", parameterToString(localVarOptionals.PublicityArtist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CbsDigitalStaff.IsSet() {
		localVarFormParams.Add("cbsDigitalStaff", parameterToString(localVarOptionals.CbsDigitalStaff.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IlmProductionStaff.IsSet() {
		localVarFormParams.Add("ilmProductionStaff", parameterToString(localVarOptionals.IlmProductionStaff.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SpecialFeaturesStaff.IsSet() {
		localVarFormParams.Add("specialFeaturesStaff", parameterToString(localVarOptionals.SpecialFeaturesStaff.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StoryEditor.IsSet() {
		localVarFormParams.Add("storyEditor", parameterToString(localVarOptionals.StoryEditor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StudioExecutive.IsSet() {
		localVarFormParams.Add("studioExecutive", parameterToString(localVarOptionals.StudioExecutive.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StuntDepartment.IsSet() {
		localVarFormParams.Add("stuntDepartment", parameterToString(localVarOptionals.StuntDepartment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransportationDepartment.IsSet() {
		localVarFormParams.Add("transportationDepartment", parameterToString(localVarOptionals.TransportationDepartment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VideoGameProductionStaff.IsSet() {
		localVarFormParams.Add("videoGameProductionStaff", parameterToString(localVarOptionals.VideoGameProductionStaff.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Writer.IsSet() {
		localVarFormParams.Add("writer", parameterToString(localVarOptionals.Writer.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v StaffBaseResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
